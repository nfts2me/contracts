/** ---------------------------------------------------------------------------- //
 *                                                                               //
 *                Smart contract generated by https://nfts2me.com                //
 *                                                                               //
 *                                      .::.                                     //
 *                                    ......                                     //
 *                                ....        ::.                                //
 *                             .:..           :: ...                             //
 *                         ..:.               ::     ...                         //
 *                       ::.      ..:--       ::.       ...                      //
 *                      .:    ..:::::-==:     :::::..     :                      //
 *                      .:    :::::::-====:   ::::::::    :                      //
 *                      .:    :::::::-======. ::::::::    :                      //
 *                      .:    :::::::-=======-::::::::    :                      //
 *                      .:    :::::::-========-:::::::    :                      //
 *                      .:    ::::::::========-:::::::    :                      //
 *                      .:    :::::::. .======-:::::::    :                      //
 *                      .:    :::::::.   :====-:::::::    :                      //
 *                      .:     .:::::.     -==-:::::.     :                      //
 *                       .:.       .:.      .--:..      ...                      //
 *                          .:.     :.               ...                         //
 *                             .... :.           ....                            //
 *                                 .:.        .:.                                //
 *                                      .::::.                                   //
 *                                      :--.                                     //
 *                                                                               //
 *                                                                               //
 *   NFTs2Me. Make an NFT Collection.                                            //
 *   With ZERO Coding Skills.                                                    //
 *                                                                               //
 *   NFTs2Me is not associated or affiliated with this project.                  //
 *   NFTs2Me is not liable for any bugs or issues associated with this contract. //
 *   NFTs2Me Terms of Service: https://nfts2me.com/terms-of-service/             //
 *   More info at: https://docs.nfts2me.com/                                     //
 * ----------------------------------------------------------------------------- */

/// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.25;

/// Utils
import {IN2MCommonStorage} from "./interfaces/IN2MCommonStorage.sol";
import {DynamicNFT} from './interfaces/DynamicNFT.sol';
import {N2MVersion} from "./N2MVersion.sol";

/// @title NFTs2Me.com Smart Contracts
/// @author The NFTs2Me Team
/// @notice Read our terms of service
/// @custom:security-contact security@nfts2me.com
/// @custom:terms-of-service https://nfts2me.com/terms-of-service/
/// @custom:website https://nfts2me.com/
abstract contract N2MCommonStorage is IN2MCommonStorage, N2MVersion {
    /// CONSTANTS
    uint8 internal constant BIT1MASK = 0x01;
    uint8 internal constant BIT2MASK = 0x02;
    uint8 internal constant BIT3MASK = 0x04;
    uint8 internal constant BIT4MASK = 0x08;
    uint8 internal constant BIT5MASK = 0x10;
    uint8 internal constant BIT6MASK = 0x20;
    uint8 internal constant BIT7MASK = 0x40;

    bytes4 internal constant IERC165_INTERFACE_ID = 0x01ffc9a7;
    bytes4 internal constant IERC173_INTERFACE_ID = 0x7f5828d0;
    bytes4 internal constant IERC721_INTERFACE_ID = 0x80ac58cd;
    bytes4 internal constant IERC721METADATA_INTERFACE_ID = 0x5b5e139f;
    bytes4 internal constant IERC2981_INTERFACE_ID = 0x2a55205a;
    bytes4 internal constant IERC4907_INTERFACE_ID = 0xad092b5c;
    bytes4 internal constant IERC5192_INTERFACE_ID = 0xb45a3c0e;
    bytes4 internal constant IERC7496_INTERFACE_ID = 0xaf332f3e;

    uint256 internal constant REENTRANCY_NOT_ENTERED = 1;
    uint256 internal constant REENTRANCY_ENTERED = 2;

    uint256 internal constant _BITPOS_INIT_COLLECTION_SIZE = 160;
    uint256 internal constant _BITPOS_INIT_ROYALTY_FEE = 192;
    uint256 internal constant _BITPOS_INIT_MINTING_TYPE = 208;
    uint256 internal constant _BITPOS_INIT_PHASE = 216;
    uint256 internal constant _BITPOS_INIT_BITMAP = 224;
    uint256 internal constant _BITPOS_INIT_RESERVED_TOKENS = 232;

    uint256 internal constant _BITPOS_PRESALE_ADDRESS = 16;
    uint256 internal constant _BITPOS_PRESALE_FREE_MINTING = 160;
    uint256 internal constant _BITPOS_PRESALE_SOULBOUND = 168;
    uint256 internal constant _BITPOS_PRESALE_MAX_AMOUNT = 176;

    uint256 internal constant _BITPOS_RENTAL_EXPIRES = 160;

    address internal constant PROTOCOL_FEE_RECIPIENT = 0x6db16927DbC38AA39F0Ee2cB545e15EFd813FB99;

    address internal constant OPENSEA_CONDUIT = 0x1E0049783F008A0085193E00003D00cd54003c71;
    address internal constant N2M_CONDUIT = 0x88899DC0B84C6E726840e00DFb94ABc6248825eC;
    address internal constant N2M_SIGNER = 0x00000000156D54b85de04c897356026a5ff2cBc9;

    /// IMMUTABLE    
    address payable internal immutable FACTORY;
    uint256 internal immutable PROTOCOL_FEE;

    uint16 internal _royaltyFee;
    uint32 internal _availableCollectionSize;
    bool internal _isEditions;
    uint32 internal _currentIndex;
    uint16 internal _maxPerAddress;                                                                 
    SalePhase internal _currentPhase;
    MintingType internal _mintingType;                                                              
    bool internal _isERC20Payment;
    bool internal _feesRemoved;
    bool internal _isDynamicNFT;
    bool internal _hasDynamicPrice;
    bool internal _soulboundCollection;
    OperatorFilterStatus internal _operatorFilterStatus;
    uint32 internal _burnedTokens;
    uint16 internal _reservedTokens;
    bool internal _hasPlaceholder;                                                                  
    bool internal _isMetadataEditable;                                                              
    uint24 internal _extraPacked;

    uint256 _extra1;
    uint256 _extra2;
    uint256 _extra3;
    uint256 _extra4;
    uint256 _extra5;
    uint256 _extra6;
    uint256 _extra7;
    uint256 _extra8;
    uint256 _extra9;

    DynamicNFT _dynamicNFT;

    string internal _name;
    string internal _symbol;
    string internal _collectionDescription;
    string internal _baseURIString;
    bytes32 internal _baseURICIDHash;
    bytes32 internal _contractURIMetadataCIDHash;
    bytes32 internal _merkleRoot;

    mapping(address => uint256) public pendingAffiliateBalance;
    uint256 internal _pendingTotalAffiliatesBalance;

    RevenueAddress[] internal _revenueInfo;
    mapping(address => AffiliateInformation) internal _affiliatesInfo;

    uint256 internal _mintPrice;
    uint256 internal _reentrancyStatus;
    uint256 internal _dropDateTimestamp;
    uint256 internal _endDateTimestamp; 

    mapping(address => uint256) public withdrawnERC20Amount;
    address internal _erc20PaymentAddress;
    uint256 internal _withdrawnAmount;

    mapping(bytes => uint256) internal _usedAmountSignature;
    mapping(uint256 => bool) internal _soulbound;
    mapping(uint256 => bytes32) internal _customURICIDHashes;

    mapping(address => bool) public whitelistedOperators;

    /// ERC-7496: NFT Dynamic Traits - EIPs
    struct TraitPermission {
        bool ownerCanUpdateValue;
        bool onlyOnce;
    }
    mapping(bytes32 => TraitPermission) internal _traitPermissions;
    mapping(uint256 tokenId => mapping(bytes32 traitKey => bytes32 traitValue)) internal _traits;
    /// @dev An offchain string URI that points to a JSON file containing trait metadata.
    string internal _traitMetadataURI;

    /// ERC-4907: Rental NFT, an Extension of EIP-721
    /// Mapping from token ID to user info.
    ///
    /// Bits Layout:
    /// - [0..159]   `user`
    /// - [160..223] `expires`
    mapping(uint256 => uint256) internal _packedUserInfo;

    mapping(uint256 => uint256) internal _packedOwnerships;

    mapping(address => uint256) internal _balanceOfData;

    mapping(uint256 => TokenApprovalRef) internal _tokenApprovals;

    mapping(address => mapping(address => bool)) internal _operatorApprovals;

    constructor(address payable factoryAddress_, uint256 protocolFee_) {
        FACTORY = factoryAddress_;
        PROTOCOL_FEE = protocolFee_;
    }

}
